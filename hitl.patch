diff --git a/scripts/jinja_gen.py b/scripts/jinja_gen.py
index 0263bac..fb70cd8 100755
--- a/scripts/jinja_gen.py
+++ b/scripts/jinja_gen.py
@@ -27,6 +27,8 @@ if __name__ == "__main__":
     parser.add_argument('env_dir')
     parser.add_argument('--mavlink_tcp_port', default=4560, help="TCP port for PX4 SITL")
     parser.add_argument('--mavlink_udp_port', default=14560, help="Mavlink UDP port for mavlink access")
+    parser.add_argument('--qgc_udp_port', default=14550, help="QGC UDP port for mavlink access")
+    parser.add_argument('--sdk_udp_port', default=14540, help="SDK UDP port for mavlink access")
     parser.add_argument('--serial_enabled', default=0, help="Enable Serial device for HITL")
     parser.add_argument('--serial_device', default="/dev/ttyACM0", help="Serial device for FMU")
     parser.add_argument('--serial_baudrate', default=921600, help="Baudrate of Serial device for FMU")
@@ -60,6 +62,8 @@ if __name__ == "__main__":
     d = {'np': np, 'rospack': rospack, \
          'mavlink_tcp_port': args.mavlink_tcp_port, \
          'mavlink_udp_port': args.mavlink_udp_port, \
+         'qgc_udp_port': args.qgc_udp_port, \
+         'sdk_udp_port': args.sdk_udp_port, \
          'serial_enabled': args.serial_enabled, \
          'serial_device': args.serial_device, \
          'serial_baudrate': args.serial_baudrate, \
diff --git a/src/mavlink_interface.cpp b/src/mavlink_interface.cpp
index a231fdb..b971dca 100644
--- a/src/mavlink_interface.cpp
+++ b/src/mavlink_interface.cpp
@@ -14,44 +14,52 @@ void MavlinkInterface::Load()
   mavlink_addr_ = htonl(INADDR_ANY);
   if (mavlink_addr_str_ != "INADDR_ANY") {
     mavlink_addr_ = inet_addr(mavlink_addr_str_.c_str());
-    if (mavlink_addr_ == INADDR_NONE) {
+    if (mavlink_addr_ == htonl(INADDR_NONE)) {
       std::cerr << "Invalid mavlink_addr: " << mavlink_addr_str_ << ", aborting\n";
       abort();
     }
   }
   local_qgc_addr_.sin_port = 0;
   if (qgc_addr_ != "INADDR_ANY") {
-    local_qgc_addr_.sin_port = inet_addr(qgc_addr_.c_str());
-    if (local_qgc_addr_.sin_port == 0) {
+    local_qgc_addr_.sin_addr.s_addr = inet_addr(qgc_addr_.c_str());
+    if (local_qgc_addr_.sin_addr.s_addr == htonl(INADDR_NONE)) {
       std::cerr << "Invalid qgc_addr: " << qgc_addr_ << ", aborting\n";
       abort();
     }
   }
+  else {
+    local_qgc_addr_.sin_addr.s_addr = htonl(INADDR_ANY);
+  }
   if (sdk_addr_ != "INADDR_ANY") {
-    local_sdk_addr_.sin_port = inet_addr(sdk_addr_.c_str());
-    if (local_sdk_addr_.sin_port == 0) {
+    local_sdk_addr_.sin_addr.s_addr = inet_addr(sdk_addr_.c_str());
+    if (local_sdk_addr_.sin_addr.s_addr == htonl(INADDR_NONE)) {
       std::cerr << "Invalid sdk_addr: " << sdk_addr_ << ", aborting\n";
       abort();
     }
   }
+  else {
+    local_sdk_addr_.sin_addr.s_addr = htonl(INADDR_ANY);
+  }
 
   if (hil_mode_) {
 
     local_qgc_addr_.sin_family = AF_INET;
-    local_qgc_addr_.sin_port = htons(0);
+    local_qgc_addr_.sin_port = htons(qgc_udp_port_);
     local_qgc_addr_len_ = sizeof(local_qgc_addr_);
 
     remote_qgc_addr_.sin_family = AF_INET;
-    remote_qgc_addr_.sin_port = htons(qgc_udp_port_);
-    remote_qgc_addr_len_ = sizeof(remote_qgc_addr_);
+    remote_qgc_addr_.sin_port = htons(0);
+    remote_qgc_addr_.sin_addr.s_addr = htonl(INADDR_NONE);
+    remote_qgc_addr_len_ = 0;
 
     local_sdk_addr_.sin_family = AF_INET;
-    local_sdk_addr_.sin_port = htons(0);
+    local_sdk_addr_.sin_port = htons(sdk_udp_port_);
     local_sdk_addr_len_ = sizeof(local_sdk_addr_);
 
     remote_sdk_addr_.sin_family = AF_INET;
-    remote_sdk_addr_.sin_port = htons(sdk_udp_port_);
-    remote_sdk_addr_len_ = sizeof(remote_sdk_addr_);
+    remote_sdk_addr_.sin_port = htons(0);
+    remote_qgc_addr_.sin_addr.s_addr = htonl(INADDR_NONE);
+    remote_sdk_addr_len_ = 0;
 
     if ((qgc_socket_fd_ = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
       std::cerr << "Creating QGC UDP socket failed: " << strerror(errno) << ", aborting\n";
@@ -556,7 +564,8 @@ void MavlinkInterface::forward_mavlink_message(const mavlink_message_t *message)
   uint8_t buffer[MAVLINK_MAX_PACKET_LEN];
   int packetlen = mavlink_msg_to_send_buffer(buffer, message);
   ssize_t len;
-  if (qgc_socket_fd_ > 0) {
+  if (qgc_socket_fd_ > 0 && remote_qgc_addr_len_ > 0 &&
+      remote_qgc_addr_.sin_addr.s_addr != htonl(INADDR_NONE)) {
     len = sendto(qgc_socket_fd_, buffer, packetlen, 0, (struct sockaddr *)&remote_qgc_addr_, remote_qgc_addr_len_);
 
     if (len <= 0)
@@ -565,7 +574,8 @@ void MavlinkInterface::forward_mavlink_message(const mavlink_message_t *message)
     }
   }
 
-  if (sdk_socket_fd_ > 0) {
+  if (sdk_socket_fd_ > 0 && remote_sdk_addr_len_ > 0 &&
+      remote_sdk_addr_.sin_addr.s_addr != htonl(INADDR_NONE)) {
     len = sendto(sdk_socket_fd_, buffer, packetlen, 0, (struct sockaddr *)&remote_sdk_addr_, remote_sdk_addr_len_);
     if (len <= 0)
     {
